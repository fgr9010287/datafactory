<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds" debug="false">

    <contextName>DataFactory</contextName>

    <property name="log_path" value="E:\\log" />
    <property name="log_name" value="dataFactory" />

    <property name="log_root_level" value="INFO" />
    <property name="log_mybatis_level" value="INFO" />
    <property name="log_proxool_level" value="INFO" />
    <property name="log_project_level" value="INFO" />


    <jmxConfigurator/>

    <!-- 控制台输出 -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder charset="UTF-8">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{80} - %msg%n</pattern>
        </encoder>
    </appender>

    <!-- 按照每天生成日志文件 -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 指定日志文件的名称 -->
        <file>${log_path}/${log_name}.log</file>
        <!--拒绝ERROR日志-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>DENY</onMatch>
            <onMisMatch>NEUTRAL</onMisMatch>
        </filter>
        <!--
            当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名
            TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。
        -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log_path}/${log_name}_%d{yyyy-MM-dd}.log</fileNamePattern>
        </rollingPolicy>

        <!--
           可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每天滚动，
           且maxHistory是365，则只保存最近365天的文件，删除之前的旧文件。注意，删除旧文件是，
           那些为了归档而创建的目录也会被删除。
           -->
        <MaxHistory>365</MaxHistory>
        <!--
           当日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动
           注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，
           必须配置timeBasedFileNamingAndTriggeringPolicy
           -->
        <TimeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
            <MaxFileSize>20MB</MaxFileSize>
        </TimeBasedFileNamingAndTriggeringPolicy>
        <encoder charset="UTF-8">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{80} - %msg%n</pattern>
        </encoder>
    </appender>

    <!-- 错误日志 -->
    <appender name="FILE_ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log_path}/${log_name}_err.log</file>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log_path}/${log_name}_err_%d{yyyy-MM-dd}.log</fileNamePattern>
        </rollingPolicy>
        <MaxHistory>365</MaxHistory>
        <TimeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
            <MaxFileSize>20MB</MaxFileSize>
        </TimeBasedFileNamingAndTriggeringPolicy>
        <encoder charset="UTF-8">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{80} - %msg%n</pattern>
        </encoder>
    </appender>

    <!-- 日志输出级别 -->
    <root level="${log_root_level}">
        <appender-ref ref="console"/>
        <appender-ref ref="FILE"/>
        <appender-ref ref="FILE_ERROR"/>
    </root>

    <!-- project default level -->
    <logger name="com.gpdi" level="${log_project_level}"/>

    <!-- 下面配置一些第三方包的日志过滤级别，用于避免刷屏 -->
    <logger name="org.springframework" level="${log_root_level}"/>
    <logger name="org.apache" level="${log_root_level}"/>
    <logger name="org.logicalcobwebs.proxool" level="${log_proxool_level}"/>
    <logger name="org.mybatis" level="${log_mybatis_level}"/>
</configuration>
